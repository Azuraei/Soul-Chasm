plugins {
    id 'java'
}

project.ext.modID = "endzio.soulchasm"
project.ext.modName = "Soul Chasm"
project.ext.modVersion = "2.5.15"
project.ext.gameVersion = "1.0.2"
project.ext.modDescription = "Adds a new invasion and with it new items, mobs and more"
project.ext.author = "Endzio"

project.ext.clientside = false

// The path to the games install directory
def gameDirectory = "/home/azurei/.local/share/Steam/steamapps/common/Necesse"

// =================================================
// ========== DO NOT EDIT BELOW THIS LINE ==========
// =================================================

// Name of the jar
def jarName = "${project.ext.modName.replace(" ", "")}-${project.ext.gameVersion}-${project.ext.modVersion}"

group project.ext.modID
version project.ext.modVersion

setSourceCompatibility(JavaVersion.VERSION_1_8)
setTargetCompatibility(JavaVersion.VERSION_1_8)

repositories {
    mavenCentral()
}

configurations {
    libDepends
}

sourceSets.main.output.resourcesDir = file("build/mod/resources/")
sourceSets.main.java.getDestinationDirectory().set(file("build/mod/"))
sourceSets.main.compileClasspath += configurations.libDepends // Adds libDepends configuration to classpath
def buildLocation = "build/jar/"

compileJava.options.encoding = "UTF-8"

if (!file(gameDirectory + "/Necesse.jar").exists()) {
    throw new Exception("Could not find game install directory. Make sure it is correct in build.gradle file.")
}

dependencies {
    implementation files(gameDirectory + "/Necesse.jar")
    implementation fileTree(gameDirectory + "/lib/")
    implementation fileTree("./mods/") // Add all mods located in local mods folder

    // Add any third party library dependencies here. Remember to use libDepends, so that they will be added to your jar on build
    // These are some examples:
//    libDepends group: 'com.google.guava', name: 'guava', version: '31.1-jre'
//    libDepends files("path/to/library/jar.jar")
}

tasks.register('createAppID') {
    group "necesse"
    description "Creates steam_appid.txt file"

    doLast {
        file("steam_appid.txt").text = "1169040"
    }
}

tasks.register('createModInfoFile', JavaExec) {
    group "necesse"
    description "Creates the mod info file"

    classpath = files(gameDirectory + "/Necesse.jar")

    main = "CreateModInfoFile"
    args "-file", "${sourceSets.main.java.outputDir}/mod.info",
            "-id", "${project.ext.modID}",
            "-name", "${project.ext.modName}",
            "-version", "${project.ext.modVersion}",
            "-gameVersion", "${project.ext.gameVersion}",
            "-description", "${project.ext.modDescription}",
            "-author", "${project.ext.author}",
            "-clientside", "${project.ext.clientside}",
            "-dependencies", project.ext.has("modDependencies") ? "[" + project.ext.modDependencies.join(", ") + "]" : "",
            "-optionalDependencies", project.ext.has("modOptionalDependencies") ? "[" + project.ext.modOptionalDependencies.join(", ") + "]" : ""
}
// Makes compiling also create mod info file
classes.dependsOn("createModInfoFile")

tasks.register('runClient', JavaExec) {
    group "necesse"
    description "Run client with current mod"
    dependsOn "buildModJar", "createAppID"

    classpath = files(gameDirectory + "/Necesse.jar")

    mainClass = "StartSteamClient"
    jvmArgs "-Xms512m", "-Xmx4G", "-XX:+UnlockExperimentalVMOptions", "-XX:+UseG1GC", "-XX:G1NewSizePercent=20", "-XX:G1ReservePercent=20", "-XX:MaxGCPauseMillis=50", "-XX:G1HeapRegionSize=32M"
    args "-dev", "-mod \"${buildLocation}\""
}

tasks.register('runDevClient', JavaExec) {
    group "necesse"
    description "Run client with current mod"
    dependsOn "buildModJar", "createAppID"

    classpath = files(gameDirectory + "/Necesse.jar")

    mainClass = "StartSteamClient" +
            ""
    jvmArgs "-Xms512m", "-Xmx4G", "-XX:+UnlockExperimentalVMOptions", "-XX:+UseG1GC", "-XX:G1NewSizePercent=20", "-XX:G1ReservePercent=20", "-XX:MaxGCPauseMillis=50", "-XX:G1HeapRegionSize=32M"
    args "-dev 1", "-mod \"${buildLocation}\""
}

tasks.register('runServer', JavaExec) {
    group "necesse"
    description "Run server with current mod"
    dependsOn "buildModJar"

    classpath = files(gameDirectory + "/Server.jar")

    mainClass = "StartDesktopServer"
    jvmArgs "-Xms512m", "-Xmx4G", "-XX:+UnlockExperimentalVMOptions", "-XX:+UseG1GC", "-XX:G1NewSizePercent=20", "-XX:G1ReservePercent=20", "-XX:MaxGCPauseMillis=50", "-XX:G1HeapRegionSize=32M"
    args "-mod \"${buildLocation}\""
}

tasks.register('buildModJar', Jar) {
    group "necesse"
    description "Generates the mod jar into the build folder"
    dependsOn "classes"

    doFirst {
        fileTree(dir: buildLocation).exclude("${jarName}.jar").visit { FileVisitDetails details ->
            delete details.file
        }
    }

    // Add mod output
    from sourceSets.main.java.outputDir
    // Add the dependencies
    from configurations.libDepends.collect { it.isDirectory() ? it : zipTree(it) }

    archiveName "${jarName}.jar"
    destinationDir file(buildLocation)
}